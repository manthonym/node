// Generated by CoffeeScript 1.6.3
(function() {
  var hashes;

  hashes = require('jshashes');

  module.exports = {

    /*
    `log (login, password, db, callback)`
    ----------------------------
    Check if the given login matches with the given password to authenticate the user
    
    Parameters
    `login`    Username of the metric creator, string
    `password` Chosen password, will be encrypted using SHA256 algo
    `db`       Database handler
    `callback` Contains an err as first argument 
               if any
     */
    log: function(login, password, db, callback) {
      var rs, sha256, userinfo;
      sha256 = new hashes.SHA256;
      userinfo = [];
      rs = db.createReadStream({
        start: "user:" + login,
        end: "user:" + login
      });
      rs.on('data', function(data) {
        var mailDB, passwordDB, _ref;
        _ref = data.value.split(':'), mailDB = _ref[0], passwordDB = _ref[1];
        if (sha256.hex(password) === passwordDB) {
          return userinfo.push({
            login: login,
            password: passwordDB,
            mail: mailDB
          });
        }
      });
      rs.on('error', callback);
      return rs.on('close', function() {
        return callback(null, userinfo);
      });
    },

    /*
    `save (login, password, db, callback)`
    ----------------------------
    Create a new user and stores information in the database
    
    Parameters
    `login`    Username of the metric creator, string
    `password` Chosen password, will be encrypted using SHA256 algo
    `db`       Database handler
    `callback` Contains an err as first argument 
               if any
     */
    save: function(login, mail, password, db, callback) {
      var password_sha, sha256, ws;
      sha256 = new hashes.SHA256;
      ws = db.createWriteStream();
      ws.on('error', callback);
      ws.on('close', callback);
      password_sha = sha256.hex(password);
      ws.write({
        key: "user:" + login,
        value: "" + mail + ":" + password_sha
      });
      return ws.end();
    }
  };

}).call(this);
