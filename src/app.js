// Generated by CoffeeScript 1.6.3
(function() {
  var app, express, http, metric_get, stylus, user;

  http = require('http');

  stylus = require('stylus');

  express = require('express');

  user = require('./user');

  app = express();

  app.set('views', __dirname + '/../views');

  app.set('view engine', 'jade');

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.cookieParser('my secret here'));

  app.use(express.session());

  app.use(app.router);

  app.use(stylus.middleware("" + __dirname + "/../public"));

  app.use(express["static"]("" + __dirname + "/../public"));

  app.use(express.errorHandler({
    showStack: true,
    dumpExceptions: true
  }));

  app.get('/', function(req, res) {
    if (req.cookies.remember) {
      console.log('cookie');
      return res.render('index', {
        title: 'Metrics'
      });
    } else {
      return res.render('user/login', {
        title: 'Login'
      });
    }
  });

  metric_get = function(req, res, next) {
    return metrics.get(req.params.id, function(err, values) {
      if (err) {
        return next(err);
      }
      return res.json({
        id: req.params.id,
        values: values
      });
    });
  };

  app.get('/metric/:id.json', metric_get);

  app.get('/metric?metric=:id', metric_get);

  app.get('/login', function(req, res) {
    return res.render('user/login', {
      title: 'Login'
    });
  });

  app.get('/user/add', function(req, res) {
    return res.render('user/add', {
      title: 'Add a user'
    });
  });

  app.post('/user/create', function(req, res) {
    return user.save(req.body.username, req.body.mail, req.body.password, function(err) {
      if (err) {
        return next(err);
      }
      return res.render('user/confirm', {
        title: 'Confirmation'
      });
    });
  });

  app.post('/user/connect', function(req, res) {
    return user.log(req.body.username, req.body.password, function(err, values) {
      var minute;
      if (err) {
        return next(err);
      }
      if (values.length === 1) {
        minute = 60 * 10;
        res.cookie('remember', 1, {
          maxAge: minute,
          httpOnly: false
        });
        console.log('Cookie set');
        if (values[0].password === req.body.password) {
          return res.render('index', {
            name: values[0].login
          });
        }
      } else {
        return res.render('user/error');
      }
    });
  });

  app.get('/data/add', function(req, res) {
    return res.render('data/add', {
      title: 'Add a metric'
    });
  });

  app.post('/data/save', function(req, res, next) {
    var values;
    values = [];
    values.push({
      timestamp: req.body.timestamp,
      value: req.body.val
    });
    return metrics.save(req.body.id, values, function(err) {
      if (err) {
        return next(err);
      }
      return res.render('data/confirm');
    });
  });

  app.post('/metric/:id.json', function(req, res, next) {
    var values;
    values = JSON.parse(req.body);
    return metrics.save(req.params.id, values, function(err) {
      if (err) {
        return next(err);
      }
      return res.json({
        status: 'OK'
      });
    });
  });

  app["delete"]('/metric/:id.json', function(req, res, next) {
    return metrics.remove(req.params.id, function(err) {
      if (err) {
        return next(err);
      }
      return res.json({
        status: 'OK'
      });
    });
  });

  http.createServer(app).listen(1234, function() {
    return console.log('http://localhost:1234');
  });

}).call(this);
